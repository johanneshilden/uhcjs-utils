module Util.Handlebars 
    ( Collection
    , compile
    , render
    , emptyCollection
    , collectionPush
    , listToCollection
    ) where

import Control.Monad                     ( foldM )
import Language.UHC.JS.Prelude
import Language.UHC.JS.Primitives
import Language.UHC.JS.Types
import Language.UHC.JS.W3C.HTML5

-- | Compile a template. Returns a template function, which is to be
-- applied a context object to produce the final HTML output.
compile :: String                   -- ^ The raw template
        -> IO (JSPtr a -> IO String)
compile source = (_compile $ toJS source) >>= return . go . mkFun
  where go :: (JSPtr a -> IO JSString) -> JSPtr a -> IO String
        go f = \x -> f x >>= return . fromJS 

foreign import js "Handlebars.compile(%1)"
    _compile :: JSString -> IO (JSFunPtr (JSPtr a -> IO JSString))

foreign import js "dynamic"
    mkFun :: JSFunPtr (JSPtr a -> IO JSString) -> JSPtr a -> IO JSString

-- | Apply the provided template function to a context.
render :: (JSPtr a -> IO String) -- ^ A function generated by compile
       -> a                     -- ^ The context
       -> IO String
render f obj = mkObj obj >>= f

data CollectionPtr

-- | Type-safe collections for use with Handlebar's #each helper.
data Collection a = JSPtr CollectionPtr

emptyCollection :: IO (Collection a)
emptyCollection = _mkCollection

foreign import js "Array()"
    _mkCollection :: IO (Collection a)

collectionPush :: (Collection a) -> a -> IO (Collection a)
collectionPush c x = mkObj x >>= _push c  

foreign import js "Array.prototype.concat(%1, %2)"
    _push :: (Collection a) -> JSPtr a -> IO (Collection a)

-- | Creates a Handlebar collection from a list. 
listToCollection :: [a] -> IO (Collection a)
listToCollection xs = do
    c <- _mkCollection
    foldM collectionPush c xs

